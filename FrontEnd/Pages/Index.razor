@page "/"
@inject HttpClient httpClient

@using FrontEnd.Services.Contracts;
@inject ICEAS CEASService
@inject IJSRuntime jsRuntime

@using System.Text
@using System.Text.Json
@using FrontEnd.Models

<div class="centered-content">
    <h3>Compiler</h3>

    <div class="column-container">
        <div class="left-column">
            <div class="column-container">
                <div class="left-column">
                    <label for="idCodeSelect">Select language:</label>
                    <select id="idCodeSelect" @onchange="HandleIdCodeChange">
                        <option value="1">Python</option>
                        <option value="3">C#</option>
                    </select>
                </div>
                <div class="right-column">
                    <div style="margin:5px 0;">
                        Select theme:
                        <select @onchange="ChangeTheme">
                            <option value="vs">Visual Studio</option>
                            <option value="vs-dark">Visual Studio Dark</option>
                            <option value="hc-black">High Contrast Black</option>
                        </select>
                    </div>
                </div>
            </div>




            <StandaloneCodeEditor @ref="_editor" ConstructionOptions="EditorConstructionOptions"
                OnDidInit="EditorOnDidInit" OnDidChangeModelContent="HandleInput" />

            <div >
                <strong>Code Status</strong>
                <div style="text-align: left;">
                    <strong>Error: @sintaxisModel.errors</strong>
                    <ul>
                        @foreach (var errorMsg in sintaxisModel.errorMsg)
                        {
                            <li>@errorMsg</li>
                        }
                    </ul>
                </div>
                <div style="text-align: left;">
                    <strong>Obs: @sintaxisModel.obs</strong>
                    <ul>
                        @foreach (var obMsg in sintaxisModel.obsMsg)
                        {
                            <li>@obMsg</li>
                        }
                    </ul>
                </div>
            </div>
        </div>

        <div class="right-column">
            <div>
                <div class="column-container">
                    <div class="left-column"style="text-align: left;">
                        <strong>Output:</strong>
                    </div>
                    <div class="right-column" style="text-align: right;" >
                        <button @onclick="RunCompiler" style="margin-right: 30px;">Run</button>
                    </div>
                
                </div>
                
                <!--<p>@outputModel.idResponse</p>-->
                <p> </p>
                <StandaloneCodeEditor @ref="_output" ConstructionOptions="OutputConstructionOptions"   />
            </div>

            
        </div>
    </div>
</div>


@code {
    private StandaloneCodeEditor _editor = null!;
    private StandaloneCodeEditor _output = null!;
    private string code = "";
    private int selectedIdCode = 1;
    private RunModel outputModel = new RunModel();
    private SintaxisModel sintaxisModel = new SintaxisModel();
    private Timer debounceTimer;
    private int debounceDelay = 500;
    private string[] decorationIds = new string[0];

    private async Task EditorOnDidInit()
    {
        var newDecorations = new ModelDeltaDecoration[]
        {
new ModelDeltaDecoration
{
Range = new BlazorMonaco.Range(3,1,3,1),
Options = new ModelDecorationOptions
{
IsWholeLine = true,
ClassName = "decorationContentC1ass",
GlyphMarginClassName = "decorationGlyphMarginC1ass"
}
}
        };

        decorationIds = await _editor.DeltaDecorations(null, newDecorations);
    }


    private async Task HandleIdCodeChange(ChangeEventArgs e)
    {
        var model = await _editor.GetModel();
        string codelang = "plaintext";

        if (int.TryParse(e.Value?.ToString(), out var idCode))
        {
            selectedIdCode = idCode;
            await CheckSintaxis();

            switch (idCode)
            {
                case 1:
                    codelang = "python";
                    break;
                case 3:
                    codelang = "csharp";
                    break;
                default:
                    break;

            }
        }

        await BlazorMonaco.Editor.Global.SetModelLanguage(jsRuntime, model, codelang);
    }

    private async Task HandleInput(ModelContentChangedEvent e)
    {
        debounceTimer?.Dispose();
        debounceTimer = new Timer(async state => await CheckSintaxis(), null, debounceDelay, Timeout.Infinite);
    }

    private async Task CheckSintaxis()
    {
        code = await _editor.GetValue();
        sintaxisModel = await CEASService.CheckSintaxisAsync(selectedIdCode, code);
    }

    private async Task RunCompiler()
    {
        outputModel = await CEASService.RunCompilerAsync(selectedIdCode, code);
        await _output.SetValue(outputModel.output);
    }

    private StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
            {
                AutomaticLayout = true,
                Language = "python",
                Value = "",
                GlyphMargin = true,
                Folding = false,
                WordBasedSuggestionsOnlySameLanguage = true
            };
    }

    private StandaloneEditorConstructionOptions OutputConstructionOptions(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
            {
                ReadOnly = true,
                Contextmenu = false,
                Language = "plaintext",
                Value = "Bienvenido a CEAS!",
                LineNumbers = "off",
                GlyphMargin = false,
                Folding = false
            };
    }

    private async Task ChangeTheme(ChangeEventArgs e)
    {
        await BlazorMonaco.Editor.Global.SetTheme(jsRuntime, e.Value?.ToString());
    }
}
