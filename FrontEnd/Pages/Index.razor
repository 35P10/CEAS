@page "/"
@inject HttpClient httpClient

@using FrontEnd.Services.Contracts;
@inject ICEAS CEASService

@using System.Text
@using System.Text.Json
@using FrontEnd.Models

<div class="centered-content">
    <h3>Compiler</h3>

    <div>
        <label for="idCodeSelect">Select language:</label>
        <select id="idCodeSelect" @onchange="HandleIdCodeChange">
            <option value="1">Python</option>
            <option value="3">C#</option>
        </select>
    </div>

    <div>
        <label for="codeInput">Input:</label>
        <textarea id="codeInput" @bind="code" @oninput="HandleInput" />
    </div>

    <div>
        <strong>Code Status</strong>
        <div>
            <strong>Error: @sintaxisModel.errors</strong>
            <ul>
                @foreach (var errorMsg in sintaxisModel.errorMsg)
                {
                    <li>@errorMsg</li>
                }
            </ul>
        </div>
        <div>
            <strong>Obs: @sintaxisModel.obs</strong>
            <ul>
                @foreach (var obMsg in sintaxisModel.obsMsg)
                {
                    <li>@obMsg</li>
                }
            </ul>
        </div>
    </div>

    <div>
        <button @onclick="RunCompiler">Run</button>
    </div>

    <div>
        <strong>Output:</strong>
        <p>@outputModel.idResponse</p>
        <p>@outputModel.output</p>
    </div>
</div>

@code {
    private string code = "";
    private int selectedIdCode = 1;
    private RunModel outputModel = new RunModel();
    private SintaxisModel sintaxisModel = new SintaxisModel();
    private Timer debounceTimer;
    private int debounceDelay = 500;

    private async Task HandleIdCodeChange(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var idCode))
        {
            selectedIdCode = idCode;
            await CheckSintaxis();
        }
    }

    private async Task HandleInput(ChangeEventArgs e)
    {
        code = e.Value.ToString();
        debounceTimer?.Dispose();
        debounceTimer = new Timer(async state => await CheckSintaxis(), null, debounceDelay, Timeout.Infinite);
    }

    private async Task CheckSintaxis()
    {
        sintaxisModel = await CEASService.CheckSintaxisAsync(selectedIdCode, code);
    }

    private async Task RunCompiler()
    {
        outputModel = await CEASService.RunCompilerAsync(selectedIdCode, code);
    }
}
